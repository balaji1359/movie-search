{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","movie_url","this","props","movie","id","window","location","href","react_default","a","createElement","key","alt","width","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchTerm","_this2","console","log","urlString","$","ajax","url","success","searchResults","results","movieRows","forEach","poster_path","movieRow","src_MovieRow","push","setState","rows","error","xhr","status","err","event","target","performSearch","className","style","fontSize","display","paddingTop","paddingBottom","paddingLeft","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA+BeA,6LAzBP,IAAMC,EAAY,oCAAsCC,KAAKC,MAAMC,MAAMC,GACzEC,OAAOC,SAASC,KAAOP,mCAIvB,OAAOQ,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,SAAOC,IAAKV,KAAKC,MAAMC,MAAMC,IAC7BI,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,YAAYC,MAAM,MAAMC,IAAKb,KAAKC,MAAMC,MAAMY,cAE3DP,EAAAC,EAAAC,cAAA,MAAIG,MAAM,MAAV,KACAL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAKT,KAAKC,MAAMC,MAAMa,OACtBR,EAAAC,EAAAC,cAAA,SAAIT,KAAKC,MAAMC,MAAMc,UACrBT,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,SAASC,QAASlB,KAAKmB,UAAUC,KAAKpB,MAAOqB,MAAM,qBAnB5DC,IAAMC,4BC4EdC,cA1Eb,SAAAA,EAAYvB,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA1B,KAAAwB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA1B,KAAA0B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA9B,KAAMC,KACD8B,MAAO,GAFKN,6EAQLO,GAAY,IAAAC,EAAAjC,KACxBkC,QAAQC,IAAI,oBACZ,IAAMC,EAAY,sIAAwIJ,EAC1JK,IAAEC,KAAK,CACLC,IAAIH,EACJI,QAAS,SAACC,GACR,IAAMC,EAAUD,EAAcC,QAE1BC,EAAY,GAEhBD,EAAQE,QAAQ,SAAC1C,GACfA,EAAMY,WAAa,kDAAoDZ,EAAM2C,YAE7EX,QAAQC,IAAIjC,EAAMa,OAClB,IAAM+B,EAAWvC,EAAAC,EAAAC,cAACsC,EAAD,CAAUrC,IAAOR,EAAMC,GAAID,MAAOA,IACnDyC,EAAUK,KAAKF,KAGjBb,EAAKgB,SAAS,CAACC,KAAKP,KAGtBQ,MAAM,SAACC,EAAIC,EAAOC,GAChBpB,QAAQC,IAAI,sEAKEoB,GAClBrB,QAAQC,IAAIoB,EAAMC,OAAOnC,OACzB,IAAMW,EAAauB,EAAMC,OAAOnC,MAChCrB,KAAKyD,cAAczB,oCAInB,OACEzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOiD,UAAU,YACfnD,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,WAAWC,MAAM,KAAMC,IAAI,cAEtCN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,iCAMRF,EAAAC,EAAAC,cAAA,SAAOkD,MAAO,CACZC,SAAS,GACTC,QAAQ,QACRjD,MAAM,MACNkD,WAAW,EACXC,cAAc,EACdC,YAAY,IACXC,SAAUjE,KAAKkE,oBAAoB9C,KAAKpB,MAAOmE,YAAY,iBAG7DnE,KAAK+B,MAAMmB,aApEF3B,aCME6C,QACW,cAA7BhE,OAAOC,SAASgE,UAEe,UAA7BjE,OAAOC,SAASgE,UAEhBjE,OAAOC,SAASgE,SAASC,MACvB,2DCVNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4040ab04.chunk.js","sourcesContent":["import React from 'react'\n\n\nclass MovieRow extends React.Component {\n\n    viewMovie() {\n        const movie_url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\n        window.location.href = movie_url \n    }\n\n    render() {\n        return <div>\n            <table key={this.props.movie.id}>\n            <tbody>\n                <tr>\n                <td>\n                    <img alt=\"loading..\" width=\"150\" src={this.props.movie.poster_src}/>\n                </td>\n                <td width=\"2%\"> </td>\n                <td>\n                    <h3>{this.props.movie.title}</h3>\n                    <p>{this.props.movie.overview}</p>\n                    <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\"/>\n                </td>\n                </tr>\n            </tbody>\n            </table>\n        </div>\n    }\n}\n\nexport default MovieRow","import React, { Component } from 'react';\nimport './App.css';\nimport MovieRow from './MovieRow.js'\nimport $ from 'jquery'\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state ={}\n    \n\n    //this.performSearch(searchTerm)\n  }\n\n  performSearch(searchTerm) {\n    console.log(\"seraching.......\")\n    const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=6c356a9956b05290257ead8ec4192700&language=en-US&page=1&include_adult=false&query=\" + searchTerm\n    $.ajax({\n      url:urlString,\n      success: (searchResults) => {\n        const results = searchResults.results\n\n        var movieRows = []\n\n        results.forEach((movie) => {\n          movie.poster_src = \"https://image.tmdb.org/t/p/w185_and_h278_bestv2\" + movie.poster_path\n\n          console.log(movie.title)\n          const movieRow = <MovieRow key = {movie.id} movie={movie}/>\n          movieRows.push(movieRow)\n        })\n\n        this.setState({rows:movieRows})\n\n      },\n      error:(xhr,status,err) => {\n        console.log(\"Failed to load Data\")\n      }\n    })\n  }\n\n  searchChangeHandler(event) {\n    console.log(event.target.value)\n    const searchTerm = event.target.value\n    this.performSearch(searchTerm)\n  }\n\n  render() {\n    return (\n      <div>\n        <table className=\"titleBar\">\n          <tbody>\n            <tr>\n              <td>\n                <img alt=\"app icon\" width=\"50\"  src=\"logo.svg\"/>\n              </td>\n              <td>\n                <h2>MoviesDB Search</h2>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <input style={{\n          fontSize:18,\n          display:'block',\n          width:\"99%\",\n          paddingTop:8,\n          paddingBottom:8,\n          paddingLeft:16\n        }} onChange={this.searchChangeHandler.bind(this)} placeholder=\"Enter Search\"/>\n\n\n        {this.state.rows}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}